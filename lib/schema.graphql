type Restaurant{
    _id:ID
    name: String!
    menus: [Menu]
}

interface Menu{
    _id:ID
    name: String!
    calories: Int
}

enum DrinkType {
    Hot,
    Cold
}

enum foodType {
    Hot Breakfast,
    Lunch,
    Yogurt,
    Snacks,
    Bakery
}

type Drink implements Menu {
    _id:ID
    name: String!
    food_type: foodType
    calories: Int
}

type Food implements Menu {
    _id:ID
    name: String!
    drink_type: DrinkType
    calories: Int
} 

type Query {
    "Get all restaurants"
    getRestaurants: [Restaurant]
    "Search a restaurant by ID"
    getRestaurant(id: ID!): Restaurant
    "Get all the menus"
    getMenus: [Menu]
    "Search a menu by ID"
    getMenu(id: ID!): Menu
    "Global search"
    searchItems(keyword: String!) : [GlobalSearch]
}

type Mutation {
    "Create a new restaurant" 
    createRestaurant(input:RestaurantInput!): Restaurant
    "Delete a restaurant" 
    deleteRestaurant(id: ID!): Boolean
    "Update a restaurant" 
    editRestaurant(id: ID!, input:RestaurantInput!): Restaurant
    "Create a new menu" 
    createMenu(input:MenuInput!): Menu
    "Update a menu" 
    editMenu(id: ID!,input:MenuInput!): Menu
    "Delete a menu" 
    deleteMenu(id: ID!): Boolean
    "add menu to the restaurant"
    addMenu(MenuID:ID!, RestaurantID: ID!): Restaurant
}

input RestaurantInput {
    name: String!
}

input MenuInput {
    name: String!
    calories: Int
    drink_type: DrinkType
    food_type: foodType
}

union GlobalSearch = Restaurant | Food | Drink

